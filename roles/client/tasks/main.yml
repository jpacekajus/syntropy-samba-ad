---
#   - name: Install aptitude using apt
#     apt: name=aptitude state=latest update_cache=yes force_apt_get=yes
#
#   - name: Install required system packages
#     apt: name={{ item }} state=latest update_cache=yes
#     loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
#
#   - name: Add Docker GPG apt Key
#     apt_key:
#       url: https://download.docker.com/linux/ubuntu/gpg
#       state: present
#
#   - name: Add Docker Repository
#     apt_repository:
#       repo: deb https://download.docker.com/linux/ubuntu focal stable
#       state: present
#
#   - name: Update apt and install docker-ce
#     apt: update_cache=yes name=docker-ce state=latest
#
#   - name: Install Docker Module for Python
#     pip:
#       name: docker
#
#   - name: Create a network with custom IPAM config
#     docker_network:
#       name: syntropynet
#       ipam_options:
#         subnet: '{{subnet}}'

#   - hostname:
#       name: "{{ inventory_hostname }}"

   - name: Update package repository and install software
     apt: name={{ item }} state=present update_cache=yes
     with_items:
          - samba
          - winbind
          - libnss-winbind
          - libpam-winbind
          - python-pexpect

            #   - name: Comment out hosts
            #     replace:
            #       path: /etc/hosts
            #       regexp: '^127.*$'
            #       replace: '#REPLACED BY ANSIBLE'
   - name: remove localhost
     lineinfile:
       path: /etc/hosts
       state: absent
       regexp: '^127.*$'

   - name: Generate new resolv.conf
     template:
       src: templates/resolv.conf.j2
       dest: /etc/resolv.conf
       owner: root
       group: root
       mode: '0644'

       #   - name: Remove configuration files
       #     file: path={{ item }} state=absent
       #     with_items:
       #          - /etc/resolv.conf
       #          - /etc/samba/smb.conf
        
   - name: Create PAM winbind file
     file: path={{ item }} owner=root group=root mode=644 state=touch
     with_items:
          - /etc/security/pam_winbind.conf

   - name: Fill in hosts file
     blockinfile:
       path: /etc/hosts
       block: |
        127.0.0.1 {{ ansible_hostname }}.{{ domain | lower }} {{ ansible_hostname }} localhost

        #   - name: add new DNS settings
        #     blockinfile:
        #       path: /etc/resolv.conf
        #       block: |
        #         nameserver 8.8.8.8 #{{ dc_ip }}     ##This is domain controller docker container IP
        #         search {{ domain | lower }}


   - name: Generate Samba config
     template:
       src: templates/smb.conf.j2
       dest: /etc/samba/smb.conf
       owner: root
       group: root
       mode: '0644'

 
        #   - name: Add new samba settings
        #     blockinfile:
        #       path: /etc/samba/smb.conf
        #       block: |
        #         [global]
        #              security = ads
        #              realm = {{ domain }}
        #              password server = {{ dc_ip }}
        #              workgroup = {{ workgroup }}
        #              winbind refresh tickets = yes
        #              winbind offline logon = true
        #              idmap config {{ workgroup }}:backend = ad
        #              idmap uid = 10000-20000
        #              idmap gid = 10000-20000
        #              winbind enum users = yes
        #              winbind enum groups = yes
        #              template homedir = /home/%D/%U
        #              template shell = /bin/bash
        #              client use spnego = yes
        #              client ntlmv2 auth = yes
        #              encrypt passwords = yes
        #              winbind use default domain = yes
        #              restrict anonymous = 2

   - name: copy /etc/nsswitch.conf
     copy:
       src=files/nsswitch.conf
       dest=/etc/nsswitch.conf
       owner=0
       group=0
       mode=0644
 
              #   - name: Add winbind for user authentication
              #     blockinfile:
              #      path: /etc/nsswitch.conf
              #      block: |
              #        passwd:         compat winbind systemd
              #        group:          compat winbind systemd
              #        shadow:         compat winbind systemd
              #        gshadow:        files
              #        hosts:          files dns
              #        networks:       files
              #        protocols:      db files
              #        services:       db files
              #        ethers:         db files
              #        rpc:            db files
 
   - name: AD join
     expect:
       command: net ads join -U administrator -S {{ dc_ip }}
       responses:
         (?i)password: "{{ domainpass }}"

   - name: flush net cache
     tags: winbind
     shell: /usr/bin/net cache flush

   - name: restart winbind
     service:
       name=winbind
       state=restarted

   - name: Get AD group SID
     shell: wbinfo -n "{{ allowed_group_name }}"
     register: sid


   - name: Fill in pam_winbind
     blockinfile:
       path: /etc/security/pam_winbind.conf
       block: |
        [global]
        ;debug = no
        ;debug_state = no
        cached_login = no
        ;krb5_auth = no
        ;krb5_ccache_type =
        require_membership_of = {{ sid.stdout }}
        ;warn_pwd_expire = 14
        ;silent = no


   - name: Update pamd rule's control in /etc/pam.d/common-session
     pamd:
       name: common-session
       type: session
       control: required
       module_path: pam_unix.so
       new_type: session
       new_control: required
       new_module_path: pam_mkhomedir.so umask=0022 skel=/etc/skel
       state: after

   - name: Allow password authentication
     lineinfile:
       path: /etc/ssh/sshd_config
       regex: ^PasswordAuthentication no
       line: PasswordAuthentication yes

   - name: reload sshd
     service:
       name=sshd
       state=reloaded

   - name: Add administrator to sudoers
     lineinfile:
       path: /etc/sudoers
       state: present
       insertafter: EOF
       line: 'administrator  ALL=(ALL:ALL) ALL'
